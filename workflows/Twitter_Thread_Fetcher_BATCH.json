{
  "createdAt": "2025-07-31T04:37:24.866Z",
  "updatedAt": "2025-08-05T16:56:52.000Z",
  "id": "5n9SdIL0qIT93gje",
  "name": "Twitter Thread Fetcher BATCH",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1312,
        496
      ],
      "id": "b3fea142-dec4-48f3-9a80-659c96600cf7",
      "name": "Merge first tweet and others"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -688,
        656
      ],
      "id": "f5cd0bdb-b449-46e6-90b7-714919fb0ca1",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "content": "## Extract first tweet\n",
        "height": 900,
        "width": 632,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -496,
        176
      ],
      "id": "b5aee0d6-3422-4e97-a474-ce1b046a07a8",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Extract thread tweets\n",
        "height": 900,
        "width": 872
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        144,
        176
      ],
      "id": "73c4986c-bca8-4f01-988e-26ee809992e1",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Merge all tweets with order\n",
        "height": 900,
        "width": 460,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1024,
        176
      ],
      "id": "9d65d752-584b-4c53-b20f-6dfa169df195",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -688,
        464
      ],
      "id": "55707632-24e1-4659-8366-bdba56fd9965",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "content": "## Extract first tweet\n- Extracts first tweet of the thread from input tweet link",
        "height": 280,
        "width": 632,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -496,
        -112
      ],
      "typeVersion": 1,
      "id": "5ee1ea55-1043-4fa2-bbc8-c353fd6eb1f2",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Extract thread tweets\n- Iterates over each reply to first tweet\n- Checks if reply is related to first tweet or not\n- If reply is continuation of first tweet, saves it into an array",
        "height": 280,
        "width": 872
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        144,
        -112
      ],
      "typeVersion": 1,
      "id": "e70a4709-8e0a-43ce-89da-3ee1e322a61d",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Merge all tweets with order\n- Merge first tweet and other tweets in thread\n- Sometimes there is an empty array after merging all tweets, so filter it",
        "height": 280,
        "width": 456,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1024,
        -112
      ],
      "typeVersion": 1,
      "id": "07b6d64b-e409-47dd-8d38-1ec3258ad5b4",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Input\n- You can trigger this workflow from another workspace\n- You can set manual trigger to test how it works\n- Suggestion: \nCreate another workflow, which gets input from twitter, notion, spreadsheet etc\nThen calls this workflow to fetch threads\n\nThis workflow will return all fetched tweets end of the pipeline",
        "height": 1192,
        "width": 504,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1008,
        -112
      ],
      "typeVersion": 1,
      "id": "bf0f44a6-8334-4862-b1d8-90bcfc9be683",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        464,
        688
      ],
      "id": "05200c8f-9ace-405a-8f2d-88ca4c88e465",
      "name": "Merge all tweet infos"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/replies",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "tweetId",
              "value": "={{ $json.tweet_id }}"
            },
            {
              "name": "author_id",
              "value": "={{ $json.author_id }}"
            },
            {
              "name": "cursor",
              "value": "={{ $json.nextCursor }}"
            }
          ]
        },
        "options": {
          "pagination": {
            "pagination": {
              "parameters": {
                "parameters": [
                  {
                    "name": "cursor",
                    "value": "={{ $response.body.next_cursor }}"
                  }
                ]
              },
              "paginationCompleteWhen": "other",
              "completeExpression": "={{ $response.body.has_next_page === false }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        672,
        688
      ],
      "id": "f9433689-342b-4fee-8a57-0509cf1464c6",
      "name": "Get Tweet Replies",
      "credentials": {
        "httpHeaderAuth": {
          "id": "lVKFxR2s5cquKAeb",
          "name": "TWITTERAPI.IO HEADER AUTH"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const originalAuthorId = $('Get first tweet1').first().json.tweets[0].author.id; \n\nlet tweets = [];\n\n// Iterate over all input items (each item has a 'tweets' array)\nfor (const item of items) {\n  if (item.json && Array.isArray(item.json.tweets)) {\n    for (const tweet of item.json.tweets) {\n      if (tweet.author && tweet.author.id === originalAuthorId) {\n        tweets.push(tweet);\n      }\n    }\n  }\n}\n\n// Reverse tweets to chronological order\ntweets = tweets.reverse();\n\n// Build the required output object\nreturn [\n  {\n    json: {\n      tweets: tweets,\n      status: \"success\",\n      msg: \"success\",\n      code: 0\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1344,
        1264
      ],
      "id": "bc1165c5-0723-47cc-98d1-c2ea5fbc9dbb",
      "name": "Fetch tweets which are connected to first tweet"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fc162a77-9a9d-4799-9dbf-88757ac4fc34",
              "leftValue": "={{ $json.tweets }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1488,
        496
      ],
      "id": "b4ac48f5-44b6-45f0-b40e-b3b058236387",
      "name": "Filter empty ones"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/bytepulselabs~x-video-downloader/run-sync-get-dataset-items",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"proxy\": {\n        \"useApifyProxy\": false\n    },\n    \"urls\": [\n        {\n            \"url\": \"{{ $json.tweets[0].url }}\",\n            \"method\": \"GET\"\n        }\n    ]\n} ",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1712,
        496
      ],
      "id": "de2af2cf-5dd9-497d-a935-b5f7cb370341",
      "name": "This Will Download Tweet Video",
      "credentials": {
        "httpQueryAuth": {
          "id": "hKGMxu03FDu9kFXi",
          "name": "APIfy"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "17DF55P-ea0u3XLPs1sbi7RAW34mJJSHv5G7d6S9aTwg",
          "mode": "list",
          "cachedResultName": "tweets-to-scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17DF55P-ea0u3XLPs1sbi7RAW34mJJSHv5G7d6S9aTwg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1177738232,
          "mode": "list",
          "cachedResultName": "tweets-to-scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17DF55P-ea0u3XLPs1sbi7RAW34mJJSHv5G7d6S9aTwg/edit#gid=1177738232"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -464,
        560
      ],
      "id": "c92a38a2-e57e-4248-9d53-89c0f28a4a47",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "dFntNaEYJAOsYZIZ",
          "name": "adamhaley@gmail Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1vb4g8FQSpXkiFD9XA32RdCgrv7EsfgxubmD4REu0Pns",
          "mode": "list",
          "cachedResultName": "Tweets Metadata",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vb4g8FQSpXkiFD9XA32RdCgrv7EsfgxubmD4REu0Pns/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vb4g8FQSpXkiFD9XA32RdCgrv7EsfgxubmD4REu0Pns/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Video Path": "={{ $json.webViewLink }}",
            "Top Level Tweet": "={{ $('Filter empty ones').item.json.tweets[0].text }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Top Level Tweet",
              "displayName": "Top Level Tweet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Video Path",
              "displayName": "Video Path",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2304,
        496
      ],
      "id": "64efdcd5-1093-4c2f-8e00-98f08de8d762",
      "name": "Store Tweet Meta-Data",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "dFntNaEYJAOsYZIZ",
          "name": "adamhaley@gmail Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweets",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "tweet_ids",
              "value": "={{ $json.tweet_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        496
      ],
      "id": "e14a64c9-3f17-487e-86cd-bb70c4bfdc24",
      "name": "Get first tweet1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "lVKFxR2s5cquKAeb",
          "name": "TWITTERAPI.IO HEADER AUTH"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.videoUrl }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1920,
        496
      ],
      "id": "549052ad-5593-4539-b00d-911c9105574e",
      "name": "Get Video FIles from APIFY"
    },
    {
      "parameters": {
        "name": "={{ $('This Will Download Tweet Video').item.json.id }}.mp4",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2128,
        496
      ],
      "id": "7d2231f5-e081-4c5e-a524-7504d3f29f3f",
      "name": "Upload Files to Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "reZwBdwR7JImRDL0",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const url = $json.tweet_url;\nconst match = url.match(/x\\.com\\/([^\\/]+)\\/status\\/(\\d+)/) || url.match(/twitter\\.com\\/([^\\/]+)\\/status\\/(\\d+)/);\nif (!match) throw new Error('Invalid tweet URL');\nreturn {\n  tweet_id: match[2],\n  username: match[1]\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        560
      ],
      "id": "03cc95f2-4560-4feb-9fc1-1c9b624c2e65",
      "name": "Extract Tweet ID and Username"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const tweetsData = $json.tweets[0];\nreturn {\n  conversationId: tweetsData.conversationId,\n  author_id: tweetsData.author.id,\n  nextCursor: null,\n  all_replies: []\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        576
      ],
      "id": "57a612af-36a6-4329-b7ca-1c6ff1389623",
      "name": "Extract Conversation and Author ID"
    },
    {
      "parameters": {
        "content": "## Upload files to Google Drive and store Metadata \n- Download video from Twitter using Apify Actor\n- Copy Video file from APIFY to GOogle Drive\n- Store Tweet content and Metadata",
        "height": 1184,
        "width": 1152,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1488,
        -112
      ],
      "id": "7aa167fd-8951-4a7a-a484-bda7131d9ab4",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "maxItems": 20
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        880,
        688
      ],
      "id": "96808481-780d-4c22-906e-b749dc8d7c50",
      "name": "Limit"
    }
  ],
  "connections": {
    "Merge first tweet and others": {
      "main": [
        [
          {
            "node": "Filter empty ones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge all tweet infos": {
      "main": [
        [
          {
            "node": "Get Tweet Replies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweet Replies": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch tweets which are connected to first tweet": {
      "main": [
        []
      ]
    },
    "Filter empty ones": {
      "main": [
        [
          {
            "node": "This Will Download Tweet Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "This Will Download Tweet Video": {
      "main": [
        [
          {
            "node": "Get Video FIles from APIFY",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Extract Tweet ID and Username",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Tweet Meta-Data": {
      "main": [
        []
      ]
    },
    "Get first tweet1": {
      "main": [
        [
          {
            "node": "Merge first tweet and others",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract Conversation and Author ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video FIles from APIFY": {
      "main": [
        [
          {
            "node": "Upload Files to Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Files to Google Drive": {
      "main": [
        [
          {
            "node": "Store Tweet Meta-Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Tweet ID and Username": {
      "main": [
        [
          {
            "node": "Merge all tweet infos",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get first tweet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Conversation and Author ID": {
      "main": [
        [
          {
            "node": "Merge all tweet infos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Merge first tweet and others",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When clicking ‘Test workflow’": [
      {
        "json": {
          "tweet_url": ""
        }
      }
    ],
    "Extract Conversation and Author ID": [
      {
        "json": {
          "conversationId": "1949484925260017770",
          "author_id": "872191892",
          "nextCursor": null,
          "all_replies": []
        }
      },
      {
        "json": {
          "conversationId": "1914210744163336235",
          "author_id": "1618052222041849856",
          "nextCursor": null,
          "all_replies": []
        }
      }
    ]
  },
  "versionId": "19d47924-d13d-4c24-a6fe-f25a998116a5",
  "triggerCount": 0,
  "tags": []
}
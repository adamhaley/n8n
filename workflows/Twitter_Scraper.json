{
  "createdAt": "2025-08-19T16:35:48.004Z",
  "updatedAt": "2025-08-23T03:53:53.000Z",
  "id": "71wgSKwCzM9dzTBs",
  "name": "Twitter Scraper",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        2224,
        352
      ],
      "id": "0498c063-1020-4c75-af38-4760d71fb18b",
      "name": "Merge first tweet and others"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        448,
        592
      ],
      "id": "1e025912-8f81-476b-a983-d006b3026cf4",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "content": "## Extract first tweet\n",
        "height": 500,
        "width": 440,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        736,
        192
      ],
      "id": "90c2e4ed-f258-4508-9bdc-a68bd42139f7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Extract thread tweets\n",
        "height": 500,
        "width": 840
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1200,
        192
      ],
      "id": "8243d3d8-fbce-45fd-a4c4-fad533d7ef62",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Merge all tweets with order\n",
        "height": 500,
        "width": 860,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2064,
        192
      ],
      "id": "1946246f-6c4f-492f-a5bb-2eb5bb02be7a",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        448,
        352
      ],
      "id": "7e05cb8e-b482-467f-a6d0-c2a8a54a5de6",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2688,
        352
      ],
      "id": "e7e534d8-cc1b-490a-88cf-194b9a3f0603",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "content": "## Extract first tweet\n- Extracts first tweet of the thread from input tweet link",
        "height": 360,
        "width": 440,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        736,
        -208
      ],
      "typeVersion": 1,
      "id": "22dc1cfb-1d53-4c78-a557-14665d9d01b0",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Extract thread tweets\n- Iterates over each reply to first tweet\n- Checks if reply is related to first tweet or not\n- If reply is continuation of first tweet, saves it into an array",
        "height": 360,
        "width": 840
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1200,
        -208
      ],
      "typeVersion": 1,
      "id": "3326e172-fe65-416b-aeab-0863c3f55eb2",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Merge all tweets with order\n- Merge first tweet and other tweets in thread\n- Sometimes there is an empty array after merging all tweets, so filter it",
        "height": 360,
        "width": 840,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2064,
        -208
      ],
      "typeVersion": 1,
      "id": "6585dcfe-3f67-4fb3-ba39-32dbd0d8fa11",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Input\n- You can trigger this workflow from another workspace\n- You can set manual trigger to test how it works\n- Suggestion: \nCreate another workflow, which gets input from twitter, notion, spreadsheet etc\nThen calls this workflow to fetch threads\n\nThis workflow will return all fetched tweets end of the pipeline",
        "height": 360,
        "width": 440,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        256,
        -64
      ],
      "typeVersion": 1,
      "id": "1cf25676-8257-4dff-aca8-81c1ee88a8a6",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "functionCode": "const url = $json.tweet_url;\nconst match = url.match(/x\\.com\\/([^\\/]+)\\/status\\/(\\d+)/) || url.match(/twitter\\.com\\/([^\\/]+)\\/status\\/(\\d+)/);\nif (!match) throw new Error('Invalid tweet URL');\nreturn {\n  tweet_id: match[2],\n  username: match[1]\n};"
      },
      "name": "Extract Tweet ID and Username",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        800,
        480
      ],
      "id": "06f4dffd-736e-4e51-8600-7aea907508c8"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweets",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "tweet_ids",
              "value": "={{ $json.tweet_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1024,
        256
      ],
      "id": "85b5f3b7-51a0-47ed-9497-05d3f753621f",
      "name": "Get first tweet",
      "credentials": {
        "httpHeaderAuth": {
          "id": "lVKFxR2s5cquKAeb",
          "name": "TWITTERAPI.IO HEADER AUTH"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const tweetsData = $json.tweets[0];\nreturn {\n  conversationId: tweetsData.conversationId,\n  author_id: tweetsData.author.id,\n  nextCursor: null,\n  all_replies: []\n};"
      },
      "name": "Extract Conversation and Author ID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1248,
        352
      ],
      "id": "7cb9ef28-a3b5-40b0-a619-80ef186d7495"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1456,
        480
      ],
      "id": "efef2568-71b4-46d5-a628-0e11dacffbd8",
      "name": "Merge all tweet infos"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/replies",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "tweetId",
              "value": "={{ $json.tweet_id }}"
            },
            {
              "name": "author_id",
              "value": "={{ $json.author_id }}"
            },
            {
              "name": "cursor",
              "value": "={{ $json.nextCursor }}"
            },
            {
              "name": "untilTime",
              "value": "={{ Math.floor(Date.parse($('Get first tweet').item.json.tweets[0].createdAt) / 1000) + 3600 }}\n"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key"
            }
          ]
        },
        "options": {
          "pagination": {
            "pagination": {
              "parameters": {
                "parameters": [
                  {
                    "name": "cursor",
                    "value": "={{ $response.body.next_cursor }}"
                  }
                ]
              },
              "paginationCompleteWhen": "other",
              "completeExpression": "={{ $response.body.has_next_page === false }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        480
      ],
      "id": "3a816e6d-4888-45ee-b953-534de42d4702",
      "name": "Get Tweet Replies",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const originalAuthorId = $('Get first tweet').first().json.tweets[0].author.id; \n\nlet tweets = [];\n\n// Iterate over all input items (each item has a 'tweets' array)\nfor (const item of items) {\n  if (item.json && Array.isArray(item.json.tweets)) {\n    for (const tweet of item.json.tweets) {\n      if (tweet.author && tweet.author.id === originalAuthorId) {\n        tweets.push(tweet);\n      }\n    }\n  }\n}\n\n// Reverse tweets to chronological order\ntweets = tweets.reverse();\n\n// Build the required output object\nreturn [\n  {\n    json: {\n      tweets: tweets,\n      status: \"success\",\n      msg: \"success\",\n      code: 0\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1904,
        480
      ],
      "id": "2d2fb221-bf75-46dd-9042-ebcbcb3e9ffb",
      "name": "Fetch tweets which are connected to first tweet"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fc162a77-9a9d-4799-9dbf-88757ac4fc34",
              "leftValue": "={{ $json.tweets }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2448,
        352
      ],
      "id": "014e948a-4ad1-4b86-8c6b-4c1910027762",
      "name": "Filter empty ones"
    }
  ],
  "connections": {
    "Merge first tweet and others": {
      "main": [
        [
          {
            "node": "Filter empty ones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Extract Tweet ID and Username",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Extract Tweet ID and Username",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Tweet ID and Username": {
      "main": [
        [
          {
            "node": "Get first tweet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge all tweet infos",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get first tweet": {
      "main": [
        [
          {
            "node": "Extract Conversation and Author ID",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge first tweet and others",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Conversation and Author ID": {
      "main": [
        [
          {
            "node": "Merge all tweet infos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge all tweet infos": {
      "main": [
        [
          {
            "node": "Get Tweet Replies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweet Replies": {
      "main": [
        [
          {
            "node": "Fetch tweets which are connected to first tweet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch tweets which are connected to first tweet": {
      "main": [
        [
          {
            "node": "Merge first tweet and others",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter empty ones": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "When clicking ‘Test workflow’": [
      {
        "json": {
          "tweet_url": "https://x.com/Muricyen/status/1952261617485545701"
        }
      }
    ]
  },
  "versionId": "2cad4b80-6f9d-4cb7-b320-c7ad04ae5246",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-19T16:35:48.010Z",
      "updatedAt": "2025-08-19T16:35:48.010Z",
      "role": "workflow:owner",
      "workflowId": "71wgSKwCzM9dzTBs",
      "projectId": "nZwUmEIL638ig6xE"
    }
  ],
  "tags": []
}
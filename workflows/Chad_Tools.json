{
  "createdAt": "2025-08-23T03:51:42.257Z",
  "updatedAt": "2025-09-10T02:41:00.000Z",
  "id": "LYSgmIDUZ56DaKIu",
  "name": "Chad Tools",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "## LogDailyDiscipline\n\nPOST log_daily_discipline",
        "height": 336,
        "width": 1200,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3072,
        -960
      ],
      "id": "841ba613-9f3e-410f-91b5-ea7604150119",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## LogWorkout\n\nPOST log_workout",
        "height": 272,
        "width": 1184,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3072,
        -576
      ],
      "id": "09d960df-8926-47ef-81e8-841f736f4db6",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## LogWeeklyGoal\n\nPOST log_weekly_goal",
        "height": 272,
        "width": 1184,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3072,
        -256
      ],
      "id": "18ed201f-2225-4ea2-a519-891afa4cf83a",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## LogHydration\n\nPOST log_hydration",
        "height": 288,
        "width": 1184,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3072,
        80
      ],
      "id": "0c0fac8b-e558-4ac1-a524-41da93a7ef71",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## LogBodyMetrics\n\nPOST log_body_metrics",
        "height": 288,
        "width": 1200,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1712,
        -944
      ],
      "id": "1a7f7a64-7fcd-40bd-916b-e188f6514148",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## LogDeviceData\n\nPOST log_device_data",
        "height": 288,
        "width": 1200,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1712,
        -576
      ],
      "id": "21da7cbf-5ce4-410b-8b80-2aecfad60187",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## GetStreak\n\nGET daily_streak\n",
        "height": 272,
        "width": 1200,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -368,
        -240
      ],
      "id": "b5452e63-a199-4d87-b51f-80fae2069a8b",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## GetGoalStatus\n\nGET goal_status",
        "height": 304,
        "width": 1200,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -368,
        96
      ],
      "id": "56c4daf8-398e-4345-b647-49ee2c34b31c",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "## GetWeeklyStreak\nGET weekly_streak",
        "height": 288,
        "width": 1200,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -368,
        -576
      ],
      "id": "7a545459-54ee-4807-8cdb-474ae2be8405",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "tableId": "discipline_log",
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2336,
        -800
      ],
      "id": "3ae4c463-c9a0-4364-a0b2-0eb9aae7c66a",
      "name": "Create a row",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1968,
        -800
      ],
      "id": "a7a83e84-cbab-41a4-a404-18df52faca2e",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "return {\n  notes:$('Parse JSON').first().json.notes,\n  completed: Boolean( $('Parse JSON').first().json.completed ),\n  user_id:$('Parse JSON').first().json.user_id,\n  discipline_id:$input.first().json.id,\n  log_date: $('Parse JSON').first().json.log_date\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2496,
        -912
      ],
      "id": "d90f882f-b9aa-42ed-a5e1-2758df39d483",
      "name": "Code"
    },
    {
      "parameters": {
        "tableId": "workout",
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2576,
        -464
      ],
      "id": "73e5c913-b296-4e2e-8b8a-d2ecc28614ab",
      "name": "Create a row1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2128,
        -464
      ],
      "id": "c6d1e3e1-60b9-4b70-ae59-ab5873fde0d9",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "jsCode": "let body = '';\n// If it's already an object, leave it alone\nif (typeof  $json.body === \"object\") {\n   body = $json.body;\n}\n// If it's a string, try to parse it\nif (typeof body === \"string\") {\n  \n    body = JSON.parse($json.body); \n  \n}\n\nreturn {\n  user_id: body.user_id,\n  type: body.type,\n  duration_min: parseInt( body.duration_min ),\n  distance_mi: parseInt( body.distance_mi ),\n  outdoor: Boolean( body.outdoor ),\n  pace_sec_per_mile: parseInt( body.pace_sec_per_mile ),\n  bench_press_weight_lb: parseInt( body.bench_press_weight_lb ),\n  bench_press_reps: parseInt( body.bench_press_reps ),\n  deadlift_weight_lb: parseInt( body.deadlift_weight_lb ),\n  deadlift_reps: parseInt( body.deadlift_reps ),\n  barbell_row_weight_lb: parseInt( body.barbell_row_weight_lb),\n  barbell_row_reps: parseInt( body.barbell_row_reps ),\n  tags: body.tags,\n  notes: body.notes,\n  log_date: $now\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2784,
        -464
      ],
      "id": "7262b9bc-ed1b-4759-b887-e30d7db8b828",
      "name": "Code1"
    },
    {
      "parameters": {
        "tableId": "weekly_goal",
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2576,
        -144
      ],
      "id": "652e26e9-841b-4490-a052-9d446f42c98e",
      "name": "Create a row2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2128,
        -144
      ],
      "id": "9c8e275e-d968-4ad4-842a-f4a15402800d",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "jsCode": "let body = $json.body;\n// If it's already an object, leave it alone\nif (typeof  $json.body === \"object\") {\n   body = $json.body;\n}\n// If it's a string, try to parse it\nif (typeof body === \"string\") {\n  \n    body = JSON.parse($json.body); \n  \n}\nreturn {\n  user_id: body.user_id,\n  week_start: body.week_start,\n  goal_text: body.goal_text,\n  status: body.status,\n  notes: body.notes\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2784,
        -144
      ],
      "id": "47cf81ef-5dbc-41ac-be9b-851d84dbcca7",
      "name": "Code2"
    },
    {
      "parameters": {
        "tableId": "hydration_log",
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2560,
        192
      ],
      "id": "547f6c0b-8a32-484b-ad04-73c19589db21",
      "name": "Create a row3",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2128,
        192
      ],
      "id": "00f49b1d-d7b1-4e9e-9593-f95d8808c8bb",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "jsCode": "let body = $json.body;\n// If it's already an object, leave it alone\nif (typeof  $json.body === \"object\") {\n   body = $json.body;\n}\n// If it's a string, try to parse it\nif (typeof body === \"string\") {\n  \n    body = JSON.parse($json.body); \n  \n}\nreturn {\n  user_id: body.user_id,\n  log_date: $now,\n  ounces: parseInt( body.ounces ),\n  tags: body.tags,\n  notes: body.notes\n  \n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2784,
        192
      ],
      "id": "57a97dec-9498-466b-a264-c51e2e52d803",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2160,
        -912
      ],
      "id": "d969a1e2-2377-498b-a3ed-66edf4251afb",
      "name": "Error Handling2"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2352,
        -464
      ],
      "id": "8d6c83f9-2f01-43a8-a563-2962df85238a",
      "name": "Error Handling"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2352,
        -144
      ],
      "id": "f793e7a5-b630-47df-aa9c-c21a2cd679a7",
      "name": "Error Handling3"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2352,
        192
      ],
      "id": "96e0839e-e23d-4d95-ad9d-e34e3419ac24",
      "name": "Error Handling4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -736,
        -816
      ],
      "id": "360565c8-0601-48a6-878a-7ecf296b8b3d",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "jsCode": "let body = $json.body;\n// If it's already an object, leave it alone\nif (typeof  $json.body === \"object\") {\n   body = $json.body;\n}\n// If it's a string, try to parse it\nif (typeof body === \"string\") {\n  \n    body = JSON.parse($json.body); \n  \n}\nreturn {\n  user_id: body.user_id,\n  log_date: $now,\n  weight_lb: parseInt( body.weight_lb ),\n  body_fat_pct: parseInt( body.body_fat_pct ),\n  subcutaneous_fat_pct: parseInt( body.subcutaneous_fat_pct ),\n  muscle_mass_lb: parseInt( body.muscle_mass_lb ),\n  water_weight_lb: parseInt( body.water_weight_lb ),\n  raw_data: body,\n  notes: body.notes\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        -816
      ],
      "id": "4e7f58e4-9ea8-4a53-8c56-ac2ae6106d35",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        -816
      ],
      "id": "da299506-a832-45fc-9844-de99b2d5e3a1",
      "name": "Error Handling5"
    },
    {
      "parameters": {
        "tableId": "device_data_log",
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1232,
        -448
      ],
      "id": "e1502671-a29a-4615-8198-2ca8a65ed0ef",
      "name": "Create a row5",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -736,
        -448
      ],
      "id": "e2d9282e-877c-4fdc-9886-3a709e318659",
      "name": "Respond to Webhook5"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        -448
      ],
      "id": "e2647c0e-39c4-40ce-96bb-fad9da53e4d6",
      "name": "Error Handling6"
    },
    {
      "parameters": {
        "jsCode": "let body = $json.body;\n// If it's already an object, leave it alone\nif (typeof  $json.body === \"object\") {\n   body = $json.body;\n}\n// If it's a string, try to parse it\nif (typeof body === \"string\") {\n  \n    body = JSON.parse($json.body); \n  \n}\nreturn {\n  user_id: body.user_id,\n  log_date: $now,\n  source: body.source,\n  readiness_score: parseInt( body.readiness_score ),\n  sleep_score: parseInt( body.sleep_score ),\n  activity_score: parseInt( body.actvity_score ),\n  heart_rate: parseInt( body.heart_rate ),\n  raw_data: body,\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1424,
        -448
      ],
      "id": "647d93f5-a173-4296-af4d-6a35f64a671f",
      "name": "Code5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        624,
        -480
      ],
      "id": "9f61f563-4d2a-472c-bbe6-d2476d6ae740",
      "name": "Respond to Webhook6"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        -480
      ],
      "id": "1553d664-3deb-4772-b047-5f282703e156",
      "name": "Error Handling7"
    },
    {
      "parameters": {
        "jsCode": "const now = new Date();\nconst dayOfWeek = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\nconst daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Monday as week start\n\nconst weekStart = new Date(now);\nweekStart.setDate(now.getDate() - daysToSubtract);\nweekStart.setHours(0, 0, 0, 0); // Set to start of day\n\nconst weekStartDate = weekStart.toISOString().split('T')[0];\n\nreturn {\n  user_id: $input.first().json.body.user_id,\n  week_start: weekStartDate\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        -480
      ],
      "id": "192a12dd-c7b0-4df0-b803-fe4983792a53",
      "name": "Code6"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        624,
        -144
      ],
      "id": "9311e8e7-5f9c-4a61-84d9-1787cb9a442c",
      "name": "Respond to Webhook7"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        -144
      ],
      "id": "7f60f076-70c1-4da4-8b55-835348903111",
      "name": "Error Handling8"
    },
    {
      "parameters": {
        "jsCode": "\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        -144
      ],
      "id": "5a458663-591a-46f0-a658-594477f0ae93",
      "name": "Code7"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        624,
        208
      ],
      "id": "8c112ee4-e361-4b1b-a454-c41acc98d8c3",
      "name": "Respond to Webhook8"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        208
      ],
      "id": "57ba3117-80b0-4403-b862-a33f2d2cbbb3",
      "name": "Error Handling9"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        208
      ],
      "id": "1e129c6b-e9cd-4465-aede-89ea8a85ea56",
      "name": "Code8"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "v_weekly_summary",
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.user_id }}"
            },
            {
              "keyName": "week_start",
              "keyValue": "={{ $json.week_start }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        144,
        -480
      ],
      "id": "17cdfc5b-4a51-479d-b8a1-3647a2d995aa",
      "name": "Get a row",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "rpc/get_current_streak"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        144,
        -144
      ],
      "id": "52e6fd73-3a09-493c-bc9b-3386c0d37850",
      "name": "Get a row1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "discipline_log"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        144,
        208
      ],
      "id": "218cebba-522a-4b7f-9740-cfff6b222a7b",
      "name": "Get a row2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "log_body_metrics",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1648,
        -816
      ],
      "id": "a4ad080a-b6ed-4127-b5e2-028d5ed2a434",
      "name": "LogBodyMetrics",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "log_device_data",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1632,
        -448
      ],
      "id": "2fee7280-a313-47dc-869c-1b2fbb165354",
      "name": "LogDeviceData",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "log_hydration",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3008,
        192
      ],
      "id": "523d0ed0-8da1-4529-a4c7-805ce291029b",
      "name": "LogHydration",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "log_weekly_goal",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3008,
        -144
      ],
      "id": "d59ea88c-aa2d-43ae-b0bf-d88bdd6da070",
      "name": "LogWeeklyGoal",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "log_workout",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3008,
        -464
      ],
      "id": "f21cba95-ba9e-4f5b-90d4-0cfc74a8047d",
      "name": "LogWorkout",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "log_daily_discipline",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3056,
        -800
      ],
      "id": "f14c8c2f-d18b-448a-8dac-19534919676c",
      "name": "LogDailyDiscipline",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "path": "weekly_streak",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -272,
        -480
      ],
      "id": "f648f160-1be6-466d-97a6-015a8549befa",
      "name": "GetWeeklyGoals",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "path": "daily_streak",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -272,
        -144
      ],
      "id": "0f00f889-238b-4eb9-bd31-c32ba82aaaa8",
      "name": "GetStreak",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "path": "goal_status",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -288,
        208
      ],
      "id": "96f7d75c-cd58-41ce-a88a-253fb9dd1457",
      "name": "GetGoalStatus",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "content": "## Chad Phase 0 Tools",
        "height": 352,
        "width": 1680,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3056,
        -1360
      ],
      "id": "2b37017a-cd5d-4399-838e-63ae42f29bc3",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "tableId": "body_metrics_log",
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1232,
        -816
      ],
      "id": "ec56c581-9e89-4327-ac87-4fd7f868efad",
      "name": "Create a row4",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## GetDisciplines",
        "height": 288,
        "width": 1184,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -368,
        -944
      ],
      "id": "295471b5-8d55-4af8-bc4f-ac6c6143eb80",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        624,
        -832
      ],
      "id": "7ba9e9f0-6ca5-4e6f-843f-446b35de55d3",
      "name": "Respond to Webhook9"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Returns error object with message if an error comes back from Google Sheets node\n */\nif($input.first().json.error){\n  return {\n    success: false,\n    message: $input.first().json.error\n  }\n\n}else{\n  return $input.all();\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        -832
      ],
      "id": "a22a87a2-e745-4ccd-b20c-711a08aa9446",
      "name": "Error Handling10"
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        -832
      ],
      "id": "542d9787-7107-464a-826e-68a01cbc9c07",
      "name": "Code9"
    },
    {
      "parameters": {
        "path": "disciplines",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -272,
        -832
      ],
      "id": "966c34d1-4f1d-4947-8686-7e4fdc31c1cc",
      "name": "GetWeeklyGoals1",
      "webhookId": "711ce8f4-05ef-4e33-b503-5d37cfca505f"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "discipline",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        144,
        -832
      ],
      "id": "95bb4930-e0cd-4812-90dd-6b019cb878eb",
      "name": "Get many rows",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "discipline",
        "filters": {
          "conditions": [
            {
              "keyName": "label",
              "keyValue": "={{ $json.discipline_name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2656,
        -800
      ],
      "id": "91751421-a758-477c-a9f2-2e90c9c12dc3",
      "name": "Get a row3",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "let body = $json.body;\n\n// If it's already an object, leave it alone\nif (typeof body === \"object\") {\n  return body;\n}\n\n// If it's a string, try to parse it\nif (typeof body === \"string\") {\n  try {\n    return JSON.parse(body);\n  } catch (e) {\n    throw new Error(\"Body is a string but not valid JSON: \" + body);\n  }\n}\n\n// Fallback if it's neither\nthrow new Error(\"Unexpected body type: \" + typeof body);\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2832,
        -912
      ],
      "id": "7a3b6d08-a6cf-42f2-b29b-ee5e8ee7f4be",
      "name": "Parse JSON"
    }
  ],
  "connections": {
    "Create a row": {
      "main": [
        [
          {
            "node": "Error Handling2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Create a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a row1": {
      "main": [
        [
          {
            "node": "Error Handling",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Create a row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a row2": {
      "main": [
        [
          {
            "node": "Error Handling3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Create a row2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a row3": {
      "main": [
        [
          {
            "node": "Error Handling4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Create a row3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling2": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling3": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling4": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Create a row4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling5": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a row5": {
      "main": [
        [
          {
            "node": "Error Handling6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling6": {
      "main": [
        [
          {
            "node": "Respond to Webhook5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Create a row5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling7": {
      "main": [
        [
          {
            "node": "Respond to Webhook6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Get a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling8": {
      "main": [
        [
          {
            "node": "Respond to Webhook7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Get a row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling9": {
      "main": [
        [
          {
            "node": "Respond to Webhook8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Get a row2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a row": {
      "main": [
        [
          {
            "node": "Error Handling7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a row1": {
      "main": [
        [
          {
            "node": "Error Handling8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a row2": {
      "main": [
        [
          {
            "node": "Error Handling9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LogBodyMetrics": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LogDeviceData": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LogHydration": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LogWeeklyGoal": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LogWorkout": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LogDailyDiscipline": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetWeeklyGoals": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetStreak": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetGoalStatus": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a row4": {
      "main": [
        [
          {
            "node": "Error Handling5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling10": {
      "main": [
        [
          {
            "node": "Respond to Webhook9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetWeeklyGoals1": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows": {
      "main": [
        [
          {
            "node": "Error Handling10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a row3": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Get a row3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "LogDailyDiscipline": [
      {
        "json": {
          "headers": {
            "host": "n8n-dev-td3g.onrender.com",
            "user-agent": "axios/1.8.3",
            "content-length": "110",
            "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
            "accept-encoding": "gzip, br",
            "authorization": "Bearer f05c6d5245373f4a81f3eacddbfeb2602bb5e66add8cdd30a836432e313a1965",
            "cdn-loop": "cloudflare; loops=1",
            "cf-connecting-ip": "35.160.120.126",
            "cf-ipcountry": "US",
            "cf-ray": "97ca61373873ad66-PDX",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "content-type": "application/json",
            "render-proxy-ttl": "4",
            "rndr-id": "6615a64c-159e-4bfd",
            "true-client-ip": "35.160.120.126",
            "x-forwarded-for": "35.160.120.126, 104.23.160.117",
            "x-forwarded-proto": "https",
            "x-request-start": "1757459644077473"
          },
          "params": {},
          "query": {},
          "body": {
            "user_id": "34b8bafe-f09f-481b-a94e-e41d8e13e8fe",
            "log_date": "2025-09-09",
            "discipline_name": "Morning Routine"
          },
          "webhookUrl": "https://n8n-dev-td3g.onrender.com/webhook/log_daily_discipline",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "3ca30910-ccc1-4e6f-997b-f0145f59e93e",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-23T03:51:42.263Z",
      "updatedAt": "2025-08-23T03:51:42.263Z",
      "role": "workflow:owner",
      "workflowId": "LYSgmIDUZ56DaKIu",
      "projectId": "nZwUmEIL638ig6xE"
    }
  ],
  "tags": []
}
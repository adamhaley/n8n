{
  "createdAt": "2025-08-07T23:42:17.548Z",
  "updatedAt": "2025-08-31T22:24:31.000Z",
  "id": "N5TvZwAU0lEjnTLi",
  "name": "Twitter ScraperOriginal",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1792,
        400
      ],
      "id": "9941017c-7e62-4a22-88be-9fda358f6e2b",
      "name": "Merge first tweet and others"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        16,
        640
      ],
      "id": "66d639af-435e-46ad-a40e-f98f112917ba",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "content": "## Extract first tweet\n",
        "height": 500,
        "width": 440,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        304,
        240
      ],
      "id": "10843b3b-b5d8-463e-be20-a872d4616216",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Extract thread tweets\n",
        "height": 500,
        "width": 840
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        768,
        240
      ],
      "id": "58068368-962f-4e9c-bfd9-2cca85d0e8aa",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Merge all tweets with order\n",
        "height": 500,
        "width": 860,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1632,
        240
      ],
      "id": "76c44673-5f4f-47dc-958b-44824b67da1d",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        16,
        400
      ],
      "id": "891e5c54-3474-4252-b2b3-7b41d7dccd1e",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2256,
        400
      ],
      "id": "f2735003-241b-42c7-b06c-183c476c95eb",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "content": "## Extract first tweet\n- Extracts first tweet of the thread from input tweet link",
        "height": 360,
        "width": 440,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        304,
        -160
      ],
      "typeVersion": 1,
      "id": "a700dcca-0a9d-409d-bd84-83c97368a76a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Extract thread tweets\n- Iterates over each reply to first tweet\n- Checks if reply is related to first tweet or not\n- If reply is continuation of first tweet, saves it into an array",
        "height": 360,
        "width": 840
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        768,
        -160
      ],
      "typeVersion": 1,
      "id": "b6a43487-197c-47b1-83b7-fdf181b8b410",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Merge all tweets with order\n- Merge first tweet and other tweets in thread\n- Sometimes there is an empty array after merging all tweets, so filter it",
        "height": 360,
        "width": 840,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1632,
        -160
      ],
      "typeVersion": 1,
      "id": "f5c14a45-01e7-4b29-a937-60e40b63a9aa",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Input\n- You can trigger this workflow from another workspace\n- You can set manual trigger to test how it works\n- Suggestion: \nCreate another workflow, which gets input from twitter, notion, spreadsheet etc\nThen calls this workflow to fetch threads\n\nThis workflow will return all fetched tweets end of the pipeline",
        "height": 360,
        "width": 440,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -176,
        -16
      ],
      "typeVersion": 1,
      "id": "1efbd9e1-ac35-4520-b612-b7f11a83a1c5",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "functionCode": "const url = $json.tweet_url;\nconst match = url.match(/x\\.com\\/([^\\/]+)\\/status\\/(\\d+)/) || url.match(/twitter\\.com\\/([^\\/]+)\\/status\\/(\\d+)/);\nif (!match) throw new Error('Invalid tweet URL');\nreturn {\n  tweet_id: match[2],\n  username: match[1]\n};"
      },
      "name": "Extract Tweet ID and Username",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        368,
        528
      ],
      "id": "d8bde3b2-49ec-4a7f-aef5-8965fce48abe"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweets",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "tweet_ids",
              "value": "={{ $json.tweet_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        592,
        304
      ],
      "id": "103dbabd-d16d-43f5-9f54-22c44e4d7261",
      "name": "Get first tweet"
    },
    {
      "parameters": {
        "functionCode": "const tweetsData = $json.tweets[0];\nreturn {\n  conversationId: tweetsData.conversationId,\n  author_id: tweetsData.author.id,\n  nextCursor: null,\n  all_replies: []\n};"
      },
      "name": "Extract Conversation and Author ID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        816,
        400
      ],
      "id": "01f9404b-56b0-424a-8bac-397e4e83b90d"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1024,
        528
      ],
      "id": "41899f3c-6a22-4982-9acd-7619587bc5ca",
      "name": "Merge all tweet infos"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/replies",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "tweetId",
              "value": "={{ $json.tweet_id }}"
            },
            {
              "name": "author_id",
              "value": "={{ $json.author_id }}"
            },
            {
              "name": "cursor",
              "value": "={{ $json.nextCursor }}"
            },
            {
              "name": "untilTime",
              "value": "={{ Math.floor(Date.parse($('Get first tweet').item.json.tweets[0].createdAt) / 1000) + 3600 }}\n"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key"
            }
          ]
        },
        "options": {
          "pagination": {
            "pagination": {
              "parameters": {
                "parameters": [
                  {
                    "name": "cursor",
                    "value": "={{ $response.body.next_cursor }}"
                  }
                ]
              },
              "paginationCompleteWhen": "other",
              "completeExpression": "={{ $response.body.has_next_page === false }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1248,
        528
      ],
      "id": "5928ebb6-3cb9-4e1b-8335-cf7163b55cf7",
      "name": "Get Tweet Replies",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const originalAuthorId = $('Get first tweet').first().json.tweets[0].author.id; \n\nlet tweets = [];\n\n// Iterate over all input items (each item has a 'tweets' array)\nfor (const item of items) {\n  if (item.json && Array.isArray(item.json.tweets)) {\n    for (const tweet of item.json.tweets) {\n      if (tweet.author && tweet.author.id === originalAuthorId) {\n        tweets.push(tweet);\n      }\n    }\n  }\n}\n\n// Reverse tweets to chronological order\ntweets = tweets.reverse();\n\n// Build the required output object\nreturn [\n  {\n    json: {\n      tweets: tweets,\n      status: \"success\",\n      msg: \"success\",\n      code: 0\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1472,
        528
      ],
      "id": "96a3017f-aa52-486f-93c0-5a94258705bb",
      "name": "Fetch tweets which are connected to first tweet"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fc162a77-9a9d-4799-9dbf-88757ac4fc34",
              "leftValue": "={{ $json.tweets }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2016,
        400
      ],
      "id": "8d950eb3-13a3-4c57-a27c-5fbba92914d9",
      "name": "Filter empty ones"
    }
  ],
  "connections": {
    "Merge first tweet and others": {
      "main": [
        [
          {
            "node": "Filter empty ones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Extract Tweet ID and Username",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Extract Tweet ID and Username",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Tweet ID and Username": {
      "main": [
        [
          {
            "node": "Get first tweet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge all tweet infos",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get first tweet": {
      "main": [
        [
          {
            "node": "Extract Conversation and Author ID",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge first tweet and others",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Conversation and Author ID": {
      "main": [
        [
          {
            "node": "Merge all tweet infos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge all tweet infos": {
      "main": [
        [
          {
            "node": "Get Tweet Replies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweet Replies": {
      "main": [
        [
          {
            "node": "Fetch tweets which are connected to first tweet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch tweets which are connected to first tweet": {
      "main": [
        [
          {
            "node": "Merge first tweet and others",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter empty ones": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When clicking ‘Test workflow’": [
      {
        "json": {
          "tweet_url": ""
        }
      }
    ]
  },
  "versionId": "b4ffdafe-1e5c-4efb-a20f-102f01fdaa38",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-07T23:42:17.552Z",
      "updatedAt": "2025-08-07T23:42:17.552Z",
      "role": "workflow:owner",
      "workflowId": "N5TvZwAU0lEjnTLi",
      "projectId": "nZwUmEIL638ig6xE"
    }
  ],
  "tags": []
}